var documenterSearchIndex = {"docs":
[{"location":"library/#InfrastructureModels.jl-Library-1","page":"Library","title":"InfrastructureModels.jl Library","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [InfrastructureModels]","category":"page"},{"location":"library/#InfrastructureModels.arrays_to_dicts!-Tuple{Dict{String,#s76} where #s76}","page":"Library","title":"InfrastructureModels.arrays_to_dicts!","text":"turns top level arrays into dicts\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.check_type-Tuple{Any,Any}","page":"Library","title":"InfrastructureModels.check_type","text":"Checks if the given value is of a given type, if not tries to make it that type\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.compare_dict-Tuple{Any,Any}","page":"Library","title":"InfrastructureModels.compare_dict","text":"tests if two dicts are equal, up to floating point precision\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.component_table-Tuple{Dict{String,#s22} where #s22,String,Array{String,1}}","page":"Library","title":"InfrastructureModels.component_table","text":"builds a table of component data\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.float2string-Tuple{AbstractFloat,Int64}","page":"Library","title":"InfrastructureModels.float2string","text":"converts a float value into a string of fixed precision\n\nsprintf would do the job but this work around is needed because sprintf cannot take format strings during runtime\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.ismultinetwork-Tuple{Dict{String,#s24} where #s24}","page":"Library","title":"InfrastructureModels.ismultinetwork","text":"checks if a given network data is a multinetwork\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.load_timepoint!-Tuple{Dict{String,#s22} where #s22,Int64}","page":"Library","title":"InfrastructureModels.load_timepoint!","text":"loads a single time point from a time_series data block into the current network\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.make_multinetwork-Tuple{Dict{String,#s21} where #s21,Set{String}}","page":"Library","title":"InfrastructureModels.make_multinetwork","text":"turns a single network and a time_series data block into a multi-network\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.print_summary-Tuple{Dict{String,#s21} where #s21}","page":"Library","title":"InfrastructureModels.print_summary","text":"prints the text summary for a data dictionary to stdout\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.ref_initialize","page":"Library","title":"InfrastructureModels.ref_initialize","text":"Given a data dictionary following the Infrastructure Models conventions, builds an initial \"ref\" dictionary converting strings to symbols and component keys to integers.  The global keys argument specifies which keys should remain in the root of dictionary when building a multi-network\n\n\n\n\n\n","category":"function"},{"location":"library/#InfrastructureModels.relaxation_complex_product-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef}","page":"Library","title":"InfrastructureModels.relaxation_complex_product","text":"constraint: c^2 + d^2 <= a*b\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_complex_product-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef}","page":"Library","title":"InfrastructureModels.relaxation_complex_product","text":"constraint: c^2  <= a*b\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_complex_product_conic-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef}","page":"Library","title":"InfrastructureModels.relaxation_complex_product_conic","text":"a conic encoding of constraint: c^2 + d^2 <= a*b\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_complex_product_conic-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef}","page":"Library","title":"InfrastructureModels.relaxation_complex_product_conic","text":"a conic encoding of constraint: c^2  <= a*b\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_complex_product_conic_on_off-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef}","page":"Library","title":"InfrastructureModels.relaxation_complex_product_conic_on_off","text":"on/off variant of relaxationcomplexproduct controlled by indicator variable z in  the conic form\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_complex_product_conic_on_off-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef}","page":"Library","title":"InfrastructureModels.relaxation_complex_product_conic_on_off","text":"on/off variant of relaxationcomplexproduct controlled by indicator variable z in  the conic form\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_complex_product_on_off-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef}","page":"Library","title":"InfrastructureModels.relaxation_complex_product_on_off","text":"on/off variant of relaxationcomplexproduct controlled by indicator variable z\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_complex_product_on_off-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,Real}","page":"Library","title":"InfrastructureModels.relaxation_complex_product_on_off","text":"on/off variant of relaxationcomplexproduct controlled by indicator variable z, variant with a fixed value of z\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_complex_product_on_off-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef}","page":"Library","title":"InfrastructureModels.relaxation_complex_product_on_off","text":"on/off variant of relaxationcomplexproduct controlled by indicator variable z\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_equality_on_off-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef}","page":"Library","title":"InfrastructureModels.relaxation_equality_on_off","text":"an on/off variant of x == y, controlled by the indicator variable z\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_equality_on_off-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,Real}","page":"Library","title":"InfrastructureModels.relaxation_equality_on_off","text":"an on/off variant of x == y, controlled by the indicator variable z, a variant for fixed z\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_product-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef}","page":"Library","title":"InfrastructureModels.relaxation_product","text":"general relaxation of binlinear term (McCormick)\n\nz >= JuMP.lower_bound(x)*y + JuMP.lower_bound(y)*x - JuMP.lower_bound(x)*JuMP.lower_bound(y)\nz >= JuMP.upper_bound(x)*y + JuMP.upper_bound(y)*x - JuMP.upper_bound(x)*JuMP.upper_bound(y)\nz <= JuMP.lower_bound(x)*y + JuMP.upper_bound(y)*x - JuMP.lower_bound(x)*JuMP.upper_bound(y)\nz <= JuMP.upper_bound(x)*y + JuMP.lower_bound(y)*x - JuMP.upper_bound(x)*JuMP.lower_bound(y)\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_product_on_off-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef}","page":"Library","title":"InfrastructureModels.relaxation_product_on_off","text":"On/Off variant of a relaxed binlinear term (McCormick) requires that all variables (x,y,z) go to zero with ind\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_product_on_off-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,Real}","page":"Library","title":"InfrastructureModels.relaxation_product_on_off","text":"On/Off variant of a relaxed binlinear term (McCormick) requires that all variables (x,y,z) go to zero with ind Variant where ind is a fixed value and not a variable\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_sqr-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef}","page":"Library","title":"InfrastructureModels.relaxation_sqr","text":"general relaxation of a square term\n\nx^2 <= y <= (JuMP.upper_bound(x)+JuMP.lower_bound(x))*x - JuMP.upper_bound(x)*JuMP.lower_bound(x)\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.relaxation_trilinear-Tuple{JuMP.Model,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,JuMP.VariableRef,Any}","page":"Library","title":"InfrastructureModels.relaxation_trilinear","text":"convex hull relaxation of trilinear term\n\nw₁ = JuMP.lower_bound(x)*JuMP.lower_bound(y)*JuMP.lower_bound(z)\nw₂ = JuMP.lower_bound(x)*JuMP.lower_bound(y)*JuMP.upper_bound(z)\nw₃ = JuMP.lower_bound(x)*JuMP.upper_bound(y)*JuMP.lower_bound(z)\nw₄ = JuMP.lower_bound(x)*JuMP.upper_bound(y)*JuMP.upper_bound(z)\nw₅ = JuMP.upper_bound(x)*JuMP.lower_bound(y)*JuMP.lower_bound(z)\nw₆ = JuMP.upper_bound(x)*JuMP.lower_bound(y)*JuMP.upper_bound(z)\nw₇ = JuMP.upper_bound(x)*JuMP.upper_bound(y)*JuMP.lower_bound(z)\nw₈ = JuMP.upper_bound(x)*JuMP.upper_bound(y)*JuMP.upper_bound(z)\nw = λ₁*w₁ + λ₂*w₂ + λ₃*w₃ + λ₄*w₄ + λ₅*w₅ + λ₆*w₆ + λ₇*w₇ + λ₈*w₈\nx = (λ₁ + λ₂ + λ₃ + λ₄)*JuMP.lower_bound(x) + (λ₅ + λ₆ + λ₇ + λ₈)*JuMP.upper_bound(x)\ny = (λ₁ + λ₂ + λ₅ + λ₆)*JuMP.lower_bound(y) + (λ₃ + λ₄ + λ₇ + λ₈)*JuMP.upper_bound(y)\nz = (λ₁ + λ₃ + λ₅ + λ₇)*JuMP.lower_bound(z) + (λ₂ + λ₄ + λ₆ + λ₈)*JuMP.upper_bound(z)\nλ₁ + λ₂ + λ₃ + λ₄ + λ₅ + λ₆ + λ₇ + λ₈ = 1\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.replicate-Tuple{Dict{String,#s22} where #s22,Int64,Set{String}}","page":"Library","title":"InfrastructureModels.replicate","text":"Transforms a single network into a multinetwork with several deepcopies of the original network\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.row_to_dict-Tuple{Any,Any}","page":"Library","title":"InfrastructureModels.row_to_dict","text":"takes a row from a matrix and assigns the values names\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.row_to_typed_dict-Tuple{Any,Any}","page":"Library","title":"InfrastructureModels.row_to_typed_dict","text":"takes a row from a matrix and assigns the values names and types\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.split_line-Tuple{AbstractString}","page":"Library","title":"InfrastructureModels.split_line","text":"\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.summary-Tuple{IO,Dict{String,#s39} where #s39}","page":"Library","title":"InfrastructureModels.summary","text":"prints the text summary for a data dictionary to IO\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.update_data!-Tuple{Dict{String,#s23} where #s23,Dict{String,#s22} where #s22}","page":"Library","title":"InfrastructureModels.update_data!","text":"recursively applies new_data to data, overwriting information\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.value2string-Tuple{AbstractFloat,Int64}","page":"Library","title":"InfrastructureModels.value2string","text":"converts a float to a string, using float_precision cutoff\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.value2string-Tuple{Any,Int64}","page":"Library","title":"InfrastructureModels.value2string","text":"converts any value to a string\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.value2string-Tuple{Array,Int64}","page":"Library","title":"InfrastructureModels.value2string","text":"converts any value to a string, summarizes arrays\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.value2string-Tuple{Dict,Int64}","page":"Library","title":"InfrastructureModels.value2string","text":"converts any value to a string, summarizes dicts\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.variable_domain-Tuple{JuMP.VariableRef}","page":"Library","title":"InfrastructureModels.variable_domain","text":"Computes the valid domain of a given JuMP variable taking into account bounds and the varaible's implicit bounds (e.g. binary).\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels.@def-Tuple{Any,Any}","page":"Library","title":"InfrastructureModels.@def","text":"The def macro is used to build other macros that can insert the same block of julia code into different parts of a program.  In InfrastructureModels packages this is macro is used to generate a standard set of fields inside a model type hierarchy.\n\n\n\n\n\n","category":"macro"},{"location":"library/#InfrastructureModels._add_line_delimiter-Tuple{AbstractString,Any,Any}","page":"Library","title":"InfrastructureModels._add_line_delimiter","text":"\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels._bold-Tuple{String}","page":"Library","title":"InfrastructureModels._bold","text":"Makes a string bold in the terminal\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels._compare_numbers-Tuple{Any,Any}","page":"Library","title":"InfrastructureModels._compare_numbers","text":"tests if two numbers are equal, up to floating point precision\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels._extract_matlab_assignment-Tuple{AbstractString}","page":"Library","title":"InfrastructureModels._extract_matlab_assignment","text":"breaks up matlab strings of the form 'name = value;'\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels._grey-Tuple{String}","page":"Library","title":"InfrastructureModels._grey","text":"Makes a string grey in the terminal, does not seem to work well on Windows terminals more info can be found at https://en.wikipedia.org/wiki/ANSIescapecode\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels._iscomponentdict-Tuple{Dict}","page":"Library","title":"InfrastructureModels._iscomponentdict","text":"Attempts to determine if the given data is a component dictionary\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels._parse_matlab_cells-Tuple{Any,Any}","page":"Library","title":"InfrastructureModels._parse_matlab_cells","text":"\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels._parse_matlab_data-NTuple{4,Any}","page":"Library","title":"InfrastructureModels._parse_matlab_data","text":"\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels._parse_matlab_matrix-Tuple{Any,Any}","page":"Library","title":"InfrastructureModels._parse_matlab_matrix","text":"\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels._type_array-Union{Tuple{Array{T,1}}, Tuple{T}} where T<:AbstractString","page":"Library","title":"InfrastructureModels._type_array","text":"Attempts to determine the type of an array of strings extracted from a matlab file\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels._type_value-Tuple{AbstractString}","page":"Library","title":"InfrastructureModels._type_value","text":"Attempts to determine the type of a string extracted from a matlab file\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels._update_data!-Tuple{Dict{String,#s21} where #s21,Dict{String,#s20} where #s20}","page":"Library","title":"InfrastructureModels._update_data!","text":"recursive call of updatedata\n\n\n\n\n\n","category":"method"},{"location":"library/#InfrastructureModels._update_data_timepoint!-Tuple{Dict{String,#s21} where #s21,Dict{String,#s20} where #s20,Int64}","page":"Library","title":"InfrastructureModels._update_data_timepoint!","text":"recursive call of updatedata\n\n\n\n\n\n","category":"method"},{"location":"developer/#Developer-Documentation-1","page":"Developer","title":"Developer Documentation","text":"","category":"section"},{"location":"developer/#JSON-Data-Format-1","page":"Developer","title":"JSON Data Format","text":"","category":"section"},{"location":"developer/#","page":"Developer","title":"Developer","text":"InfrastructureModels and dependent packages leverage an extensible JSON-based data format.  This allows arbitrary extensions by the dependent packages and their users.  This section discusses the data standards that are consistent across dependent packages and extensions.","category":"page"},{"location":"developer/#Single-Network-Data-1","page":"Developer","title":"Single Network Data","text":"","category":"section"},{"location":"developer/#","page":"Developer","title":"Developer","text":"All network data has one required parameter,","category":"page"},{"location":"developer/#","page":"Developer","title":"Developer","text":"per_unit: a boolean value indicating if component parameters are in mixed-units or per unit","category":"page"},{"location":"developer/#","page":"Developer","title":"Developer","text":"and three optional parameters,","category":"page"},{"location":"developer/#","page":"Developer","title":"Developer","text":"multinetwork: a boolean value indicating if the data represents a single network or multiple networks (assumed to be false when not present)\nname: a human readable name for the network\ndescription: a textual description of the network and any related notes","category":"page"},{"location":"developer/#","page":"Developer","title":"Developer","text":"These top level parameters can be accompanied by collections of components, where the component name is the key of the collection.  A minimalist network dataset would be,","category":"page"},{"location":"developer/#","page":"Developer","title":"Developer","text":"{\n\"per_unit\": <boolean>,\n(\"multinetwork\": false,)\n(\"name\": <string>,)\n(\"description\": <string>,)\n\"component_1\": {...},\n\"component_2\": {...},\n...\n\"component_j\": {...}\n}","category":"page"},{"location":"developer/#","page":"Developer","title":"Developer","text":"Each component collection is a lookup table of the form index-to-component_data.  Each component has two required parameters,","category":"page"},{"location":"developer/#","page":"Developer","title":"Developer","text":"index: the component's unique integer value, which is also its lookup id\nstatus: an integer that takes 1 or 0 indicating if the component is active or inactive, respectively","category":"page"},{"location":"developer/#","page":"Developer","title":"Developer","text":"and three optional parameters,","category":"page"},{"location":"developer/#","page":"Developer","title":"Developer","text":"name: a human readable name for the component\nsource_id: a string representation of a unique id from a source dataset\ndispatchable: a boolean value indicating the component can be controlled or not.  The default value is component dependent and some component types may ignore this parameter.","category":"page"},{"location":"developer/#","page":"Developer","title":"Developer","text":"A typical component collection has a form along these lines,","category":"page"},{"location":"developer/#","page":"Developer","title":"Developer","text":"{\n\"component_1\":{\n    \"1\":{\n        \"index\": 1,\n        \"status\": <int>,\n        (\"name\": <string>,)\n        (\"source_id\": <string>,)\n        (\"dispatchable\": <boolean>,)\n        ...\n    },\n    \"2\":{\n        \"index\": 2,\n        \"status\" :<int>,\n        (\"name\": <string>,)\n        (\"source_id\": <string>,)\n        (\"dispatchable\": <boolean>,)\n        ...\n    }\n    ...\n    \"k\":{\n        \"index\": k,\n        \"status\" <int>,\n        (\"name\": <string>,)\n        (\"source_id\": <string>,)\n        (\"dispatchable\": <boolean>,)\n        ...\n    }\n},\n...\n}","category":"page"},{"location":"developer/#Multi-Network-Data-1","page":"Developer","title":"Multi Network Data","text":"","category":"section"},{"location":"developer/#","page":"Developer","title":"Developer","text":"If the multinetwork parameter is true then several single network data objects are wrapped in a nw lookup table, like so,","category":"page"},{"location":"developer/#","page":"Developer","title":"Developer","text":"{\n\"multinetwork\": true,\n\"per_unit\": <boolean>,\n(\"name\": <string>,)\n(\"description\": <string>,)\n\"nw\":{\n    \"1\":{\n        \"index\": <int>,\n        (\"name\": <string>,)\n        (\"description\": <string>,)\n        \"component_1\": {...},\n        ...\n        \"component_j\": {...}\n    },\n    \"2\":{\n        \"index\": <int>,\n        (\"name\": <string>,)\n        (\"description\": <string>,)\n        \"component_1\": {...},\n        ...\n        \"component_j\": {...}\n    },\n    ...\n    \"i\":{\n        \"index\": <int>,\n        (\"name\": <string>,)\n        (\"description\": <string>,)\n        \"component_1\": {...},\n        ...\n        \"component_j\": {...}\n    },\n}\n}","category":"page"},{"location":"developer/#Multi-Infrastructure-Data-(proposed)-1","page":"Developer","title":"Multi Infrastructure Data (proposed)","text":"","category":"section"},{"location":"developer/#","page":"Developer","title":"Developer","text":"If the data include the parameter multiinfrastructure, then network data objects are wrapped in a mi lookup table, that uses special string names for each type of infrastructure.  Each infrastructure data object can include a single network or a multi network of that infrastructure type.  Multi network lookup keys are assumed to be consistent across multiple infrastructure datasets.","category":"page"},{"location":"developer/#","page":"Developer","title":"Developer","text":"{\n\"multiinfrastructure\": true,\n\"mi\":{\n    \"ep\": {...},\n    \"ng\": {...},\n    \"pw\": {...},\n    ...\n}\n}","category":"page"},{"location":"developer/#Variable-Naming-Conventions-1","page":"Developer","title":"Variable Naming Conventions","text":"","category":"section"},{"location":"developer/#Suffixes-1","page":"Developer","title":"Suffixes","text":"","category":"section"},{"location":"developer/#","page":"Developer","title":"Developer","text":"_fr: from-side ('i'-node)\n_to: to-side ('j'-node)","category":"page"},{"location":"#InfrastructureModels.jl-Documentation-1","page":"Home","title":"InfrastructureModels.jl Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"CurrentModule = InfrastructureModels","category":"page"},{"location":"#Overview-1","page":"Home","title":"Overview","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"InfrastructureModels.jl is a Julia package for shared functionality across multiple inftrastructure optimizatoin packages. It primarily provides utilities for parsing and modifying data.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Typically InfrastructureModels is not useful on its own and is included as a requirement for other package.  To test that the package work correctly run,","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pkg.test(\"InfrastructureModels\")","category":"page"}]
}
